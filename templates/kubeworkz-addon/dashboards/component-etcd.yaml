apiVersion: monitoring.kubeworkz.io/v1
kind: Dashboard
metadata:
  name: etcd
  labels:
    scope: component-monitoring
    component: etcd
    app: {{ template "kube-prometheus-stack.name" $ }}-dashboard
{{ include "kube-prometheus-stack.labels" $ | indent 4 }}
  namespace: kubeworkz-monitoring
spec:
  title: Etcd
  variables:
  - query:
      name: cluster
      label: K8s Cluster
      request: "label_values(up, cluster)"
      datasource: prometheus
  - query:
      name: job
      label: etcd cluster
      request: "label_values(etcd_server_has_leader, job)"
      datasource: prometheus
      includeAll: true
  rows:
  - name: etcd core monitoring
    panels:
    - singleStat:
        title: Number of etcd instances
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(etcd_server_has_leader{cluster=\"$cluster\",job=\"$job\"})"
            instant: true
    - graph:
        title: RPC Rate
        datasource: Prometheus
        span: 5
        targets:
        - prometheus:
            query: "sum(rate(grpc_server_started_total{cluster=\"$cluster\",job=\"$job\",grpc_type=\"unary\"}[5m]))"
            legend: "RPC Rate"
        - prometheus:
            query: "sum(rate(grpc_server_handled_total{cluster=\"$cluster\",job=\"$job\",grpc_type=\"unary\",grpc_code!=\"OK\"}[5m]))"
            legend: "RPC Failed Rate"
        axes:
          left:
            unit: ops
    - graph:
        title: Active Grpc Streams
        datasource: Prometheus
        span: 5
        targets:
        - prometheus:
            query: "sum(grpc_server_started_total{cluster=\"$cluster\",job=\"$job\",grpc_service=\"etcdserverpb.Watch\",grpc_type=\"bidi_stream\"}) - sum(grpc_server_handled_total{cluster=\"$cluster\", job=\"$job\",grpc_service=\"etcdserverpb.Watch\",grpc_type=\"bidi_stream\"})"
            legend: "Watch Streams"
        - prometheus:
            query: "sum(grpc_server_started_total{cluster=\"$cluster\",job=\"$job\",grpc_service=\"etcdserverpb.Lease\",grpc_type=\"bidi_stream\"}) - sum(grpc_server_handled_total{cluster=\"$cluster\", job=\"$job\",grpc_service=\"etcdserverpb.Lease\",grpc_type=\"bidi_stream\"})"
            legend: "Lease Streams"
        axes:
          left:
            unit: ops
    - graph:
        title: Client traffic - inflow rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "rate(etcd_network_client_grpc_received_bytes_total{cluster=\"$cluster\",job=\"$job\"}[5m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: bps
    - graph:
        title: Client traffic - outflow rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "rate(etcd_network_client_grpc_sent_bytes_total{cluster=\"$cluster\",job=\"$job\"}[5m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: bps
    - graph:
        title: Customer Peer traffic-inflow rate Side traffic-outflow rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "rate(etcd_network_peer_received_bytes_total{cluster=\"$cluster\",job=\"$job\"}[5m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: bps
    - graph:
        title: Peer traffic-outflow rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "rate(etcd_network_peer_sent_bytes_total{cluster=\"$cluster\",job=\"$job\"}[5m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: bps
    - graph:
        title: DB size
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "etcd_mvcc_db_total_size_in_bytes{cluster=\"$cluster\", job=\"$job\"}"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: byte
    - graph:
        title: Brush delay 99 value
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket{cluster=\"$cluster\", job=\"$job\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}} WAL fsync"
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket{cluster=\"$cluster\", job=\"$job\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}} DB fsync"
        axes:
          left:
            unit: s
  - name: Raft monitoring
    panels:
    - singleStat:
        title: Raft Pending Proposal Total
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(etcd_server_proposals_pending{cluster=\"$cluster\", job=\"$job\"})"
            instant: true
    - graph:
        title: Raft Proposal Rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "sum(rate(etcd_server_proposals_failed_total{cluster=\"$cluster\", job=\"$job\"}[5m]))"
            legend: "Proposal Failure Rate"
        - prometheus:
            query: "sum(rate(etcd_server_proposals_committed_total{cluster=\"$cluster\",job=\"$cluster\"}[5m]))"
            legend: "Proposal Commit Rate"
        - prometheus:
            query: "sum(rate(etcd_server_proposals_applied_total{cluster=\"$cluster\", job=\"$cluster\"}[5m]))"
            legend: "Proposal Apply Rate"
        axes:
          left:
            unit: ops
    - graph:
        title: Number of cluster leader elections (Per Day)
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "changes(etcd_server_leader_changes_seen_total{cluster=\"$cluster\",job=\"$job\"}[1d])"
            legend: "{{`{{`}}instance{{`}}`}} Total Leader Elections Per Day"
  - name: Resource usage
    panels:
    - graph:
        title: Memory
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "process_resident_memory_bytes{job=\"$job\", cluster=\"$cluster\"}"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: byte
    - graph:
        title: CPU usage
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "rate(process_cpu_seconds_total{job=\"$job\", cluster=\"$cluster\"}[2m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: cores
    - graph:
        title: goroutine quantity
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "go_goroutines{job=\"$job\", cluster=\"$cluster\"}"
            legend: "{{`{{`}}instance{{`}}`}}"