{{- $cluster := "$cluster" -}}
{{- if .Values.kubeworkz.dashboard.multicluster -}}
    {{- $cluster = "$cluster" -}}
{{- else -}}
    {{- $cluster = "" -}}
{{- end -}}
apiVersion: monitoring.kubeworkz.io/v1
kind: Dashboard
metadata:
  name: kube-resource-cluster
  namespace: kube-public
  labels:
    app: {{ template "kube-prometheus-stack.name" $ }}-dashboard
{{ include "kube-prometheus-stack.labels" $ | indent 4 }}
spec:
  title: kube-resource-cluster
  rows:
  - name: Cluster status
    panels:
    - singleStat:
        title: CPU utilization
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "1 - avg(rate(node_cpu_seconds_total{mode=\"idle\", cluster=\"{{ $cluster }}\"}[2m]))"
            instant: true
    - singleStat:
        title: CPU Request Water Level
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Cpu Limit Water Level
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Memory utilization
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "1 - sum(:node_memory_MemAvailable_bytes:sum{cluster=\"{{ $cluster }}\"}) / sum(node_memory_MemTotal_bytes{cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Memory Requests Water Level
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(namespace_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) / sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Memory Limits Water Level
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) / sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: Number of nodes
        datasource: Prometheus
        span: 2
        linkUrl: "/platform/cluster/$cluster/node"
        targets:
        - prometheus:
            query: "count (kube_node_info{cluster=\"{{ $cluster }}\"})"
            instant: true
    - singleStat:
        title: File system usage
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "sum (
  max without (fstype, mountpoint) (
    node_filesystem_size_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"} - node_filesystem_avail_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"}
  )
)
/ scalar(sum(max without (fstype, mountpoint) (node_filesystem_size_bytes{cluster=\"{{ $cluster }}\",job=\"node-exporter\", fstype!=\"\"})))"
            instant: true
    - singleStat:
        title: APIServers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"apiserver\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"apiserver\"})"
            instant: true
    - singleStat:
        title: ControllerManagers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-controller-manager\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-controller-manager\"})"
            instant: true
    - singleStat:
        title: Schedulers Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-scheduler\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-scheduler\"})"
            instant: true
    - singleStat:
        title: Etcds Up %
        datasource: Prometheus
        span: 2
        unit: percentunit
        targets:
        - prometheus:
            query: "count(up{cluster=\"{{ $cluster }}\",job=\"kube-etcd\"} == 1) / count(up{cluster=\"{{ $cluster }}\",job=\"kube-etcd\"})"
            instant: true
  - name: Cluster health
    panels:
    - singleStat:
        title: Number of disk warning nodes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"DiskPressure\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: Number of memory warning nodes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"MemoryPressure\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: Number of abnormal nodes in the network
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"NetworkUnavailable\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: Number of not-ready nodes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_info{cluster=\"{{ $cluster }}\"}) - count (kube_node_status_condition{cluster=\"{{ $cluster }}\",condition=\"Ready\",status=\"true\"} == 1)"
            instant: true
    - singleStat:
        title: Number of unschedulable nodes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_node_spec_unschedulable{cluster=\"{{ $cluster }}\"} == 1)"
            instant: true
    - singleStat:
        title: Number of copies not ready
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "count (kube_pod_container_status_waiting_reason{cluster=\"{{ $cluster }}\",reason=\"CrashLoopBackOff\"} == 1)"
            instant: true
  - name: Node capacity planning
    panels:
    - table:
        title: Node resource usage
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_info{cluster=\"{{ $cluster }}\",node!=\"\"}) by (node)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(node_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(node_cpu:kube_pod_container_resource_limits:sum{cluster=\"{{ $cluster }}\"}) by (node) / sum(kube_node_status_allocatable{resource=\"cpu\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(kube_node_status_allocatable_cpu_cores{cluster=\"{{ $cluster }}\"}) by (node) - sum(node_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum (node_namespace_pod_container:container_memory_working_set_bytes{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(node_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)/ sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: G
        - prometheus:
            query: "sum(node_memory:kube_pod_container_resource_limits:sum{cluster=\"{{ $cluster }}\"}) by (node)/ sum(kube_node_status_allocatable{resource=\"memory\",cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: H
        - prometheus:
            query: "sum(kube_node_status_allocatable_memory_bytes{cluster=\"{{ $cluster }}\"}) by (node) - sum(node_memory:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (node)"
            format: table
            instant: true
            ref: I
        styles:
        - alias: Node
          pattern: node
          link: true
          linkUrl: "/platform/cluster/$cluster/$__cell/monitor"
        - alias: Number of pods
          pattern: "Value #A"
        - alias: Actual CPU usage
          pattern: "Value #B"
        - alias: CPU Requests Water Level
          pattern: "Value #C"
          unit: percentunit
        - alias: CPU Limits Water Level
          pattern: "Value #D"
          unit: percentunit
        - alias: CPU Requests remaining amount (Cores)
          pattern: "Value #E"
        - alias: Actual memory usage
          pattern: "Value #F"
          unit: bytes
        - alias: Memory Requests Water Level
          pattern: "Value #G"
          unit: percentunit
        - alias: Memory Limits Water Level
          pattern: "Value #H"
          unit: percentunit
        - alias: Memory Requests remaining amount
          pattern: "Value #I"
          unit: bytes
  - name: Spatial resource planning
    panels:
    - graph:
        title: CPU Usage
        span: 12
        stack: true
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: cores
    - table:
        title: CPU Quota
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_owner{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"{{ $cluster }}\"}) by (workload, namespace)) by (namespace)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(namespace_cpu:kube_pod_container_resource_requests:sum{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace) / sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"{{ $cluster }}\"}) by (namespace) / sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"cpu\"}) by (namespace)"
            format: table
            instant: true
            ref: G
        styles:
        - alias: Namespace
          pattern: namespace
        - alias: Pods
          pattern: "Value #A"
        - alias: Workloads
          pattern: "Value #B"
        - alias: CPU Usage
          pattern: "Value #C"
        - alias: CPU Requests(Cores)
          pattern: "Value #D"
        - alias: CPU usage (/Requests)
          pattern: "Value #E"
          unit: percentunit
        - alias:  CPU Limits(Cores)
          pattern: "Value #F"
        - alias: CPU Usage(/Limits)
          pattern: "Value #G"
          unit: percentunit
    - graph:
        title: Memory usage (excluding Cache)
        span: 12
        stack: true
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: bytes
    - table:
        title: Memory Quota
        span: 12
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum(kube_pod_owner{cluster=\"{{ $cluster }}\"}) by (namespace)"
            format: table
            instant: true
            ref: A
        - prometheus:
            query: "count(avg(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"{{ $cluster }}\"}) by (workload, namespace)) by (namespace)"
            format: table
            instant: true
            ref: B
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace)"
            format: table
            instant: true
            ref: C
        - prometheus:
            query: "sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: D
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace) / sum(kube_pod_container_resource_requests{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: E
        - prometheus:
            query: "sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: F
        - prometheus:
            query: "sum(container_memory_rss{cluster=\"{{ $cluster }}\", container!=\"\"}) by (namespace) / sum(kube_pod_container_resource_limits{cluster=\"{{ $cluster }}\", resource=\"memory\"}) by (namespace)"
            format: table
            instant: true
            ref: G
        styles:
        - alias: Namespace
          pattern: namespace
        - alias: Pods
          pattern: "Value #A"
        - alias: Workloads
          pattern: "Value #B"
        - alias: Memory Usage
          pattern: "Value #C"
          unit: bytes
        - alias: Memory Requests
          pattern: "Value #D"
          unit: bytes
        - alias: Memory Usage (/Requests)
          pattern: "Value #E"
          unit: percentunit
        - alias: Memory Limits
          pattern: "Value #F"
          unit: bytes
        - alias: Memory Usage (/Limits)
          pattern: "Value #G"
          unit: percentunit
  - name: Network Bandwidth
    panels:
    - graph:
        title: Network Bandwidth - Inflow
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_bytes_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
    - graph:
        title: Network Bandwidth - Outflow
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_bytes_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
  - name: Network Packet Rate
    panels:
    - graph:
        title: Packet Receiving Rate
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_packets_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
    - graph:
        title: Packet Sending Rate
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_packets_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
  - name: Network Packet Loss Rate
    panels:
    - graph:
        title: Packet Loss Rate - Inflow
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_receive_packets_dropped_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
    - graph:
        title: Packet Loss Rate-outflow
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum(irate(container_network_transmit_packets_dropped_total{cluster=\"{{ $cluster }}\", namespace=~\".+\"}[2m])) by (namespace)"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: pps
  - name: Disk I/O Distribution
    panels:
    - graph:
        title: IOPS (read + write)
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "ceil(sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m])))"
            legend: "{{`{{`}}namespace{{`}}`}}"
    - graph:
        title: Throughput (read+write)
        datasource: Prometheus
        stack: true
        targets:
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            legend: "{{`{{`}}namespace{{`}}`}}"
        axes:
          left:
            unit: Bps
    - table:
        title: Current Disk I/O Value
        datasource: Prometheus
        targets:
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: A
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: B
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: C
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: D
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: E
        - prometheus:
            query: "sum by(namespace) (rate(container_fs_reads_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]) + rate(container_fs_writes_bytes_total{container!=\"\", cluster=\"{{ $cluster }}\"}[5m]))"
            instant: true
            format: table
            ref: F
        hiddenColumns: ["Time"]
        styles:
        - pattern: "namespace"
          alias: Namespace
        - pattern: "Value #A"
          alias: IOPS (read)
        - pattern: "Value #B"
          alias: IOPS (write)
        - pattern: "Value #C"
          alias: IOPS (read + write)
        - pattern: "Value #D"
          alias: Read Throughput
          unit: Bps
        - pattern: "Value #E"
          alias: Write Throughput
          unit: Bps
        - pattern: "Value #F"
          alias: Throughput (read+write)
          unit: Bps

