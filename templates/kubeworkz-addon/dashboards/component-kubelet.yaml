apiVersion: monitoring.kubeworkz.io/v1
kind: Dashboard
metadata:
  name: kubelet
  labels:
    scope: component-monitoring
    component: kubelet
    app: {{ template "kube-prometheus-stack.name" $ }}-dashboard
{{ include "kube-prometheus-stack.labels" $ | indent 4 }}
  namespace: kubeworkz-monitoring
spec:
  title: Kubelet
  variables:
  - query:
      name: cluster
      label: Cluster
      request: "label_values(up, cluster)"
      datasource: prometheus
  - query:
      name: instance
      label: Instance
      request: "label_values(process_cpu_seconds_total{cluster=\"$cluster\", job=\"kubelet\"}, instance)"
      datasource: prometheus
      includeAll: true
  rows:
  - name: Kubelet running status
    panels:
    - singleStat:
        title: Number of running Kubelet instances
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(kubelet_node_name{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\"})"
            instant: true
    - singleStat:
        title: Number of running Pod instances
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(kubelet_running_pods{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}) OR sum(kubelet_running_pod_count{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"})"
            instant: true
    - singleStat:
        title: Number of running Container instances
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(kubelet_running_containers{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}) OR sum(kubelet_running_container_count{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"})"
            instant: true
    - singleStat:
        title: Actual total number of data volumes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(volume_manager_total_volumes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\", state=\"actual_state_of_world\"})"
            instant: true
    - singleStat:
        title: Expected total number of data volumes
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(volume_manager_total_volumes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\",state=\"desired_state_of_world\"})"
            instant: true
    - singleStat:
        title: Kubelet configuration error statistics
        datasource: Prometheus
        span: 2
        targets:
        - prometheus:
            query: "sum(kubelet_node_config_error{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"})"
            instant: true
  - name: Kubelet runtime monitoring
    panels:
    - graph:
        title: Runtime operation execution rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "sum(rate(kubelet_runtime_operations_total{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (operation_type, instance)"
            legend: "{{`{{`}}instance{{`}}`}} {{`{{`}}operation_type{{`}}`}}"
        axes:
          left:
            unit: ops
    - graph:
        title: Runtime operation error rate
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "sum(rate(kubelet_runtime_operations_errors_total{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, operation_type)"
            legend: "{{`{{`}}instance{{`}}`}} {{`{{`}}operation_type{{`}}`}}"
        axes:
          left:
            unit: ops
    - graph:
        title: Operation delay 99 value
        datasource: Prometheus
        span: 12
        targets:
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(kubelet_runtime_operations_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, operation_type, le))"
            legend: "{{`{{`}}cluster{{`}}`}} {{`{{`}}instance{{`}}`}} e2e"
        axes:
          left:
            unit: s
    - graph:
        title: Pod startup frequency
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "sum(rate(kubelet_pod_start_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance)"
            legend: "{{`{{`}}instance{{`}}`}} pod"
        - prometheus:
            query: "sum(rate(kubelet_pod_worker_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance)"
            legend: "{{`{{`}}instance{{`}}`}} worker"
        axes:
          left:
            unit: ops
    - graph:
        title: Pod startup delay 99 value
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(kubelet_pod_start_duration_seconds_count{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}} pod"
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(kubelet_pod_worker_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}} worker"
        axes:
          left:
            unit: s
  - name: PLEG monitoring
    panels:
    - graph:
        title: PLEG relist frequency
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "sum(rate(kubelet_pleg_relist_duration_seconds_count{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", instance=~\"$instance\"}[5m])) by (instance)"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: ops
    - graph:
        title: PLEG relist interval
        datasource: Prometheus
        span: 6
        targets:
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_interval_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: s
    - graph:
        title: PLEG relist delay 99 value
        datasource: Prometheus
        span: 12
        targets:
        - prometheus:
            query: "histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{cluster=\"$cluster\",job=\"kubelet\", metrics_path=\"/metrics\",instance=~\"$instance\"}[5m])) by (instance, le))"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: s
  - name: Resource usage
    panels:
    - graph:
        title: Memory
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "process_resident_memory_bytes{job=\"kubelet\",instance=~\"$instance\", cluster=\"$cluster\"}"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: byte
    - graph:
        title: CPU usage
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "rate(process_cpu_seconds_total{job=\"kubelet\",instance=~\"$instance\", cluster=\"$cluster\"}[2m])"
            legend: "{{`{{`}}instance{{`}}`}}"
        axes:
          left:
            unit: cores
    - graph:
        title: goroutine quantity
        datasource: Prometheus
        span: 4
        targets:
        - prometheus:
            query: "go_goroutines{job=\"kubelet\",instance=~\"$instance\", cluster=\"$cluster\"}"
            legend: "{{`{{`}}instance{{`}}`}}"